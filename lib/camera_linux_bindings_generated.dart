// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/camera_linux.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CameraLinuxBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CameraLinuxBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CameraLinuxBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void startVideoCaptureInThread() {
    return _startVideoCaptureInThread();
  }

  late final _startVideoCaptureInThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'startVideoCaptureInThread');
  late final _startVideoCaptureInThread =
      _startVideoCaptureInThreadPtr.asFunction<void Function()>();

  void stopVideoCapture() {
    return _stopVideoCapture();
  }

  late final _stopVideoCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('stopVideoCapture');
  late final _stopVideoCapture =
      _stopVideoCapturePtr.asFunction<void Function()>();

  void pauseVideoCapture() {
    return _pauseVideoCapture();
  }

  late final _pauseVideoCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pauseVideoCapture');
  late final _pauseVideoCapture =
      _pauseVideoCapturePtr.asFunction<void Function()>();

  void resumeVideoCapture() {
    return _resumeVideoCapture();
  }

  late final _resumeVideoCapturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('resumeVideoCapture');
  late final _resumeVideoCapture =
      _resumeVideoCapturePtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Uint8> getLatestFrameBytes(
    ffi.Pointer<ffi.Int> length,
  ) {
    return _getLatestFrameBytes(
      length,
    );
  }

  late final _getLatestFrameBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ffi.Int>)>>('getLatestFrameBytes');
  late final _getLatestFrameBytes = _getLatestFrameBytesPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Int>)>();
}
